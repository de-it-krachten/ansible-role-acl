---

- name: Make sure package acl related packages are present
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ acl_packages }}"

- name: Check for existance of directories  # noqa jinja[invalid]
  ansible.builtin.stat:
    path: "{{ item }}"
  loop: "{{ acl_list | json_query('[].path') | unique }}"
  register: _paths

- name: Create directories (when not existing)
  ansible.builtin.file:
    path: "{{ item.item }}"
    state: directory
    owner: "root"
    group: "root"
    mode: '0770'
  loop: "{{ _paths.results }}"
  loop_control:
    label:
      - "{{ item.item }}"
  when: not item.stat.exists

- name: Change ownership recursively  # noqa jinja[invalid]
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ acl_default_user | default(omit) }}"
    group: "{{ acl_default_group | default(omit) }}"
    recurse: yes
  loop: "{{ acl_list | json_query('[].path') | unique }}"
  when: acl_default_user|length > 0 or acl_default_group|length > 0

- name: Set ACL
  ansible.posix.acl:
    path: "{{ item.path }}"
    entity: "{{ item.entity | default(item.group) }}"
    etype: "{{ item.etype | default('group') }}"
    permissions: "{{ item.perms }}"
    state: present
    recursive: true
    use_nfsv4_acls: "{{ acl_use_nfsv4 }}"
  loop: "{{ acl_list }}"

- name: Set default ACL
  ansible.posix.acl:
    path: "{{ item.path }}"
    entity: "{{ item.entity | default(item.group) }}"
    etype: "{{ item.etype | default('group') }}"
    permissions: "{{ item.perms }}"
    state: present
    recursive: true
    default: true
    use_nfsv4_acls: "{{ acl_use_nfsv4 }}"
  loop: "{{ acl_list }}"
